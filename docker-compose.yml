version: '3'
services:
  mysql-db: #service의 이름이다
    build:
      # context를 잡아주는 이유는 Dockerfile에서 명시된 init.sql을 찾기 위해서이다
      context: ./dockerdb #이 폴더를 기준으로 경로를 준다 docker-test-db폴더 내에 있는 Dockerfile을 타깃
      dockerfile: Dockerfile
    ports: # 포트포워딩을 해준다.
      - 3306:3306
    volumes: #이 compose파일을 기준으로 docker-test-db폴더랑 컨테이너 내부에 폴더를 마운트하여 데이터베이스의 데이터를 저장한다.
      - ./dockerdb/store:/var/lib/mysql
    networks: #network이름을 network라고 지정
      - network
  server: # service의 이름이다
    build:
      context: .
      dockerfile: Dockerfile
    restart: always #서버가 꺼지게 되면 항상 재시작하도록
    ports: #포트포워딩
      - 8080:8080
    depends_on: # db가 만들어지지 않은 상황에서 서버가 실행되면 터진다. db먼저 실행하고 서버가 실행될 수 있도록 한다.
      - mysql-db
    environment: #환경변수이다. 여기서는 db컨테이너의 IP를 타깃 삼았고 이 환경변수는 appication-prod.yml에서 환경변수로 인식하여 사용함
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/testdb?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_DRIVER: com.mysql.cj.jdbc.Driver
      SPRING_DATASOURCE_USERNAME: test
      SPRING_DATASOURCE_PASSWORD: test1234
    networks:
      - network

# 가장 중요한 것은 두 환경을 동일 네트워크로 잡아줘야 한다는 것이다
# 아까 network라고 이름을 지어주었기 떄문에..configs:
# 같은 동일 네트워크로 묶어주면 좋은점이 뭐냐면 각각의 컨테이너가 어떤 IP로 띄워질지 모르는 상황에서 serivce의 이름만으로 해당 컨테이너를 지정할 수 있다
networks:
  network: